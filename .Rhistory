####Data Analysis####
#outputs 1-6 ranked least to greatest for each IC
data_analysis <- function(results){
dimension = dim(results)
N = dimension[1]
count_IC = dimension[2]
sorted_results = matrix(0, N, 18)
colnames(sorted_results) = c(paste("AIC", 1:6, sep = "_"), paste("AICc", 1:6, sep = "_"), paste("BIC", 1:6, sep = "_"))
for (i in 1:N){
###AIC###
all_AIC = c(results[i, seq(count_IC, from=1, by=3)])
minAIC = min(all_AIC)
name = names(all_AIC)
sorted_AIC = sort(all_AIC, decreasing = FALSE)
sorted_name = names(sorted_AIC)
final_sorted = c()
for (k in 1:6){
type = substr(sorted_name[k], 1, nchar(sorted_name[k])-7)
value = sorted_AIC[k]
item = paste(type, value, sep = ", ")
final_sorted = c(final_sorted, item)
}
sorted_results[i, 1:6] = final_sorted
###AICc###
all_AICc = c(results[i, seq(count_IC, from=2, by=3)])
minAICc = min(all_AICc)
name = names(all_AICc)
sorted_AICc = sort(all_AICc, decreasing = FALSE)
sorted_name = names(sorted_AICc)
final_sorted = c()
for (k in 1:6){
type = substr(sorted_name[k], 1, nchar(sorted_name[k])-8)
value = sorted_AICc[k]
item = paste(type, value, sep = ", ")
final_sorted = c(final_sorted, item)
}
sorted_results[i, 7:12] = final_sorted
###BIC###
all_BIC = c(results[i, seq(count_IC, from=3, by=3)])
minBIC = min(all_BIC)
name = names(all_BIC)
sorted_BIC = sort(all_BIC, decreasing = FALSE)
sorted_name = names(sorted_BIC)
final_sorted = c()
for (k in 1:6){
type = substr(sorted_name[k], 1, nchar(sorted_name[k])-7)
value = sorted_BIC[k]
item = paste(type, value, sep = ", ")
final_sorted = c(final_sorted, item)
}
sorted_results[i, 13:18] = final_sorted
}
return(sorted_results)
}
####Difference Matrix####
diff <- function(results, exp_col_num_AIC) {
#@param exp_col_num_AIC: represents column index of AIC_[FIT]
#competitor-truth
#so want positive
#can be 1 (UN), 4 (SIM), 7 (CS), 10 (AR1), 13 (CSH), 16 (ARH1)
N = dim(results)[1]
diff_matrix = matrix(nrow = N, ncol = dim(results)[2])
#for each row...
for (i in 1:N) {
currentRow = results[i,]
###AIC###
exp_value_AIC = results[i, exp_col_num_AIC]
#for each AIC value in results... count up by 3's
for (j in seq(18, from=1, by = 3)) {
#each entry in difference matrix will be a difference between exp
#and all other covariance structure AIC values
diff_matrix[i,j] = currentRow[j] - exp_value_AIC
}
###AICc###
#now get AICc column index, and value
exp_col_num_AICc = exp_col_num_AIC + 1
exp_value_AICc = results[i, exp_col_num_AICc]
#for each AICc value...
for (j in seq(18, from = 2, by = 3)) {
diff_matrix[i,j] = currentRow[j] - exp_value_AICc
}
###BIC###
#now get BIC column index, and value
exp_col_num_BIC = exp_col_num_AIC + 2
exp_value_BIC = results[i, exp_col_num_BIC]
#for each BIC value
for (j in seq(18, from = 3, by = 3)) {
diff_matrix[i,j] = currentRow[j] - exp_value_BIC
}
}
#set col names
colnames(diff_matrix) = colnames(results)
return (diff_matrix)
}
####Quad Correct Analysis####
quad_correct <- function(diff_matrix, thumb){
N = dim(diff_matrix)[1]
quad_matrix = matrix(0, 4, 18)
colnames(quad_matrix) = colnames(diff_matrix)
rownames(quad_matrix) = c(1:4)
for (i in 1:18){
count_1 = 0
count_2 = 0
count_3 = 0
count_4 = 0
for (j in 1:N){
if (diff_matrix[j, i]>0 && diff_matrix[j, i] < thumb){
##Right model, not significant
count_1 = count_1 + 1
}
else if (diff_matrix[j, i] < 0 &&
diff_matrix[j, i] > -(thumb)) {
##Wrong model, not significant
count_2 = count_2 + 1
}
else if (diff_matrix[j, i] < 0 &&
diff_matrix[j, i] < -(thumb)) {
##Wrong model, Significant
count_3 = count_3 + 1
}
else if (diff_matrix[j, i] > 0 &&
diff_matrix[j, i] > thumb) {
##Right model, significant
count_4 = count_4 + 1
}
}
quad_matrix[1, i] = count_1/N
quad_matrix[2, i] = count_2/N
quad_matrix[3, i] = count_3/N
quad_matrix[4, i] = count_4/N
}
return(quad_matrix)
}
####Distribution Histogram Gen Functions####
AICDistribution_manual <- function(N, n_subs, Sigma, means) {
#matrix with AIC scores for different fits as columns
AIC_scores = matrix(nrow = N, ncol = 6)
names = c("Unstructured", "Simple", "CS", "AR1", "CSH", "ARH1")
#for each row in AIC_scores...
for (i in 1:N) {
n_obs = dim(Sigma)[1]
#generate data
data = generate_data(n_obs, n_subs, Sigma, means)
#generate fits
fits = fit_data(data, n_obs, n_subs)
UN_AIC = fits[1]
SIM_AIC = fits[4]
CS_AIC = fits[7]
AR1_AIC = fits[10]
CSH_AIC = fits[13]
ARH1_AIC = fits[16]
#collect AIC scores for each fit
AICVector = c(UN_AIC, SIM_AIC, CS_AIC, AR1_AIC, CSH_AIC, ARH1_AIC)
#put the AIC scores into AIC_scores matrix
for (j in 1:6) {
AIC_scores[i, j] = AICVector[j]
}
}
#histogram each column
for (i in 1:6) {
hist(AIC_scores[, i], xlab = paste("AIC values for", names[i], sep = " "), main = paste("Distribution of AIC", names[i], "Values", sep = " "))
}
}
AICcDistribution_manual <- function(N, n_subs, Sigma, means) {
#matrix with AICc scores for different fits as columns
AICc_scores = matrix(nrow = N, ncol = 6)
names = c("Unstructured", "Simple", "CS", "AR1", "CSH", "ARH1")
#for each row in AICc_scores...
for (i in 1:N) {
n_obs = dim(Sigma)[1]
#generate data
data = generate_data(n_obs, n_subs, Sigma, means)
#generate fits
fits = fit_data(data, n_obs, n_subs)
UN_AICc = fits[2]
SIM_AICc = fits[5]
CS_AICc = fits[8]
AR1_AICc = fits[11]
CSH_AICc = fits[14]
ARH1_AICc = fits[17]
#collect AICc scores for each fit
AICcVector = c(UN_AICc, SIM_AICc, CS_AICc, AR1_AICc, CSH_AICc, ARH1_AICc)
#put the AICc scores into AICc_scores matrix
for (j in 1:6) {
AICc_scores[i, j] = AICcVector[j]
}
}
#histogram each column
for (i in 1:6) {
hist(AICc_scores[, i], xlab = paste("AICc values for", names[i], sep = " "), main = paste("Distribution of AICc", names[i], "Values", sep = " "))
}
}
BICDistribution_manual <- function(N, n_subs, Sigma, means) {
#matrix with BIC scores for different fits as columns
BIC_scores = matrix(nrow = N, ncol = 6)
names = c("Unstructured", "Simple", "CS", "AR1", "CSH", "ARH1")
#for each row in BIC_scores...
for (i in 1:N) {
n_obs = dim(Sigma)[1]
#generate data
data = generate_data(n_obs, n_subs, Sigma, means)
#generate fits
fits = fit_data(data, n_obs, n_subs)
UN_BIC = fits[3]
SIM_BIC = fits[6]
CS_BIC = fits[9]
AR1_BIC = fits[12]
CSH_BIC = fits[15]
ARH1_BIC = fits[18]
#collect BIC scores for each fit
BICVector = c(UN_BIC, SIM_BIC, CS_BIC, AR1_BIC, CSH_BIC, ARH1_BIC)
#put the BIC scores into AIC_scores matrix
for (j in 1:6) {
BIC_scores[i, j] = BICVector[j]
}
}
#histogram each column
for (i in 1:6) {
hist(BIC_scores[, i], xlab = paste("BIC values for", names[i], sep = " "), main = paste("Distribution of BIC", names[i], "Values", sep = " "))
}
}
AICDistribution <- function(results) {
N = dim(results)[1]
names = c("Unstructured", "Simple", "CS", "AR1", "CSH", "ARH1")
AICMatrix = matrix(nrow = N, ncol = 6)
for (i in 1:N) {
k = 1
for (j in seq(18, from = 1, by = 3)) {
AICMatrix[i, k] = results[i, j]
k = k + 1
}
}
#histogram each column
for (i in 1:6) {
hist(AICMatrix[, i], xlab = paste("AIC values for", names[i], sep = " "), main = paste("Distribution of AIC", names[i], "Values", sep = " "))
}
}
AICcDistribution <- function(results) {
N = dim(results)[1]
names = c("Unstructured", "Simple", "CS", "AR1", "CSH", "ARH1")
AICcMatrix = matrix(nrow = N, ncol = 6)
for (i in 1:N) {
k = 1
for (j in seq(18, from = 3, by = 3)) {
AICcMatrix[i, k] = results[i, j]
k = k + 1
}
}
#histogram each column
for (i in 1:6) {
hist(AICcMatrix[, i], xlab = paste("AICc values for", names[i], sep = " "), main = paste("Distribution of AICc", names[i], "Values", sep = " "))
}
}
BICDistribution <- function(results) {
N = dim(results)[1]
names = c("Unstructured", "Simple", "CS", "AR1", "CSH", "ARH1")
BICMatrix = matrix(nrow = N, ncol = 6)
for (i in 1:N) {
k = 1
for (j in seq(18, from = 2, by = 3)) {
BICMatrix[i, k] = results[i, j]
k = k + 1
}
}
#histogram each column
for (i in 1:6) {
hist(BICMatrix[, i], xlab = paste("BIC values for", names[i], sep = " "), main = paste("Distribution of BIC", names[i], "Values", sep = " "))
}
}
####Makes Box Plots for Experiment Shown in Thesis (RHO)####
#section 6
AICRhoBoxplots <- function() {
AIC_UN_Data = matrix(nrow = 100, ncol = 10)
AIC_SIM_Data = matrix(nrow = 100, ncol = 10)
AIC_CS_Data = matrix(nrow = 100, ncol = 10)
AIC_AR1_Data = matrix(nrow = 100, ncol = 10)
AIC_CSH_Data = matrix(nrow = 100, ncol = 10)
AIC_ARH1_Data = matrix(nrow = 100, ncol = 10)
#we vary rho from 0 to .9
for (i in 0:9) {
#these are the parameters detailed in section 6
Sigma = makeCS(3, i / 10, 1.2)
res = results_matrix(100, 3, 40, Sigma, c(0, 0, 0))
differences = diff(res, 7)
AIC_UN_Data[, i+1] = differences[, 1]
AIC_SIM_Data[, i+1] = differences[, 4]
AIC_CS_Data[, i+1] = differences[, 7]
AIC_AR1_Data[, i+1] = differences[, 10]
AIC_CSH_Data[, i+1] = differences[, 13]
AIC_ARH1_Data[, i+1] = differences[, 16]
}
#create boxplots
boxplot(AIC_UN_Data[,1:10], main = "AIC_UN - AIC_CS")
boxplot(AIC_SIM_Data[,1:10], main = "AIC_SIM - AIC_CS")
boxplot(AIC_CS_Data[,1:10], main = "AIC_CS - AIC_CS")
boxplot(AIC_AR1_Data[,1:10], main = "AIC_AR1 - AIC_CS")
boxplot(AIC_CSH_Data[,1:10], main = "AIC_CSH - AIC_CS")
boxplot(AIC_ARH1_Data[,1:10], main = "AIC_ARH1 - AIC_CS")
}
####Makes Box Plots for Experiment Shown in Thesis (SIGMA)####
#section 6
AICSigmaBoxplots <- function() {
AIC_UN_Data = matrix(nrow = 100, ncol = 10)
AIC_SIM_Data = matrix(nrow = 100, ncol = 10)
AIC_CS_Data = matrix(nrow = 100, ncol = 10)
AIC_AR1_Data = matrix(nrow = 100, ncol = 10)
AIC_CSH_Data = matrix(nrow = 100, ncol = 10)
AIC_ARH1_Data = matrix(nrow = 100, ncol = 10)
#we vary sigma from 1 to 1.9. Rho = .5
for (i in 0:9) {
#these are the parameters detailed in section 6
Sigma = makeCS(3, .5, 1+i/10)
res = results_matrix(100, 3, 40, Sigma, c(0, 0, 0))
differences = diff(res, 7)
AIC_UN_Data[, i+1] = differences[, 1]
AIC_SIM_Data[, i+1] = differences[, 4]
AIC_CS_Data[, i+1] = differences[, 7]
AIC_AR1_Data[, i+1] = differences[, 10]
AIC_CSH_Data[, i+1] = differences[, 13]
AIC_ARH1_Data[, i+1] = differences[, 16]
}
#create boxplots
boxplot(AIC_UN_Data[,1:10], main = "AIC_UN - AIC_CS")
boxplot(AIC_SIM_Data[,1:10], main = "AIC_SIM - AIC_CS")
boxplot(AIC_CS_Data[,1:10], main = "AIC_CS - AIC_CS")
boxplot(AIC_AR1_Data[,1:10], main = "AIC_AR1 - AIC_CS")
boxplot(AIC_CSH_Data[,1:10], main = "AIC_CSH - AIC_CS")
boxplot(AIC_ARH1_Data[,1:10], main = "AIC_ARH1 - AIC_CS")
}
####Overlapping Histograms####
overlap_histograms <- function(data, exp_col_num_AIC){
##generates 5 double histograms for each IC which compare expected type
##distribution to each other distribution
##outputs as a pdf called "dataname_histograms.pdf"
dataset = deparse(substitute(data))
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
pdf(file=paste(dataset, "_", "histograms", ".pdf", sep = ""))
layout(mat = matrix(c(1, 2, 3, 4, 5, 0), nrow = 3, ncol = 2))
###AIC###
AIC_cols = c(1, 4, 7, 10, 13, 16)
for (col in AIC_cols){
if (col != exp_col_num_AIC){
min = min(c(data[,exp_col_num_AIC], data[,col])) - 10
max = max(c(data[,exp_col_num_AIC], data[,col])) + 10
breakpoints = pretty(min:max, n = 25)
names = colnames(data)
hist1 = hist(data[,exp_col_num_AIC], breaks = breakpoints, plot = FALSE)
hist2 = hist(data[,col], breaks = breakpoints, plot = FALSE)
plot(hist1, xlab = paste("Blue:", names[exp_col_num_AIC], "Pink:", names[col], sep = " "), main = paste(dataset, "Visualization of AIC Comparison", sep = ": "), col = c1)
plot(hist2, col = c2, add = TRUE)
}
else if (col == exp_col_num_AIC){
}
}
###AICc###
AICc_cols = c(2, 5, 8, 11, 14, 17)
exp_col_num_AICc = exp_col_num_AIC + 1
for (col in AICc_cols){
if (col != exp_col_num_AICc){
min = min(c(data[,exp_col_num_AICc], data[,col])) - 10
max = max(c(data[,exp_col_num_AICc], data[,col])) + 10
breakpoints = pretty(min:max, n = 25)
names = colnames(data)
hist1 = hist(data[,exp_col_num_AICc], breaks = breakpoints, plot = FALSE)
hist2 = hist(data[,col], breaks = breakpoints, plot = FALSE)
plot(hist1, xlab = paste("Blue:", names[exp_col_num_AICc], "Pink:", names[col], sep = " "), main = paste(dataset, "Visualization of AICc Comparison", sep = ": "), col = c1)
plot(hist2, col = c2, add = TRUE)
}
else if (col == exp_col_num_AICc){
}
}
###BIC###
BIC_cols = c(3, 6, 9, 12, 15, 18)
exp_col_num_BIC = exp_col_num_AIC + 2
for (col in BIC_cols){
if (col != exp_col_num_BIC){
min = min(c(data[,exp_col_num_BIC], data[,col])) - 10
max = max(c(data[,exp_col_num_BIC], data[,col])) + 10
breakpoints = pretty(min:max, n = 25)
names = colnames(data)
hist1 = hist(data[,exp_col_num_BIC], breaks = breakpoints, plot = FALSE)
hist2 = hist(data[,col], breaks = breakpoints, plot = FALSE)
plot(hist1, xlab = paste("Blue:", names[exp_col_num_BIC], "Pink:", names[col], sep = " "), main = paste(dataset, "Visualization of BIC Comparison", sep = ": "), col = c1)
plot(hist2, col = c2, add = TRUE)
}
else if (col == exp_col_num_BIC){
}
}
dev.off()
}
N = 10
#generate examples in 2.), varying the variance of variances
for (i in 1:N) {
# 1,2,3 then 2,3,4 then 3,4,5 then...
sigmas = c(sqrt(1), sqrt(2+i*N/4), sqrt(3))
#Note that the matrix is CSH (we could also do ARH1)
Sigma = makeCSH(3, .5, sigmas)
res = results_matrix(100, 3, 10, Sigma, c(0,0,0))
differences = diff(res, 13)
#get success/failure rates
successRates = quad_correct(differences, thumb)
#writing file names and saving to csv tee hee
sigmasSquared = c(sigmasSquared[1]^2, sigmasSquared[2]^2, sigmasSquared[3]^2)
varOfVar = var(sigmasSquared)
filename = paste("quad_matrix_varying_variances/", varOfVar, ".csv")
write.csv(successRates, filename, row.names = FALSE)
}
N = 10
thumb = 3
#generate examples in 2.), varying the variance of variances
for (i in 1:N) {
# 1,2,3 then 2,3,4 then 3,4,5 then...
sigmas = c(sqrt(1), sqrt(2+i*N/4), sqrt(3))
#Note that the matrix is CSH (we could also do ARH1)
Sigma = makeCSH(3, .5, sigmas)
res = results_matrix(100, 3, 10, Sigma, c(0,0,0))
differences = diff(res, 13)
#get success/failure rates
successRates = quad_correct(differences, thumb)
#writing file names and saving to csv tee hee
sigmasSquared = c(sigmasSquared[1]^2, sigmasSquared[2]^2, sigmasSquared[3]^2)
varOfVar = var(sigmasSquared)
filename = paste("quad_matrix_varying_variances/", varOfVar, ".csv")
write.csv(successRates, filename, row.names = FALSE)
}
#generate examples in 2.), varying the variance of variances
for (i in 1:N) {
# 1,2,3 then 2,3,4 then 3,4,5 then...
sigmas = c(sqrt(1), sqrt(2+i*N/4), sqrt(3))
#Note that the matrix is CSH (we could also do ARH1)
Sigma = makeCSH(3, .5, sigmas)
res = results_matrix(100, 3, 10, Sigma, c(0,0,0))
differences = diff(res, 13)
#get success/failure rates
successRates = quad_correct(differences, thumb)
#writing file names and saving to csv tee hee
sigmasSquared = c(sigmas[1]^2, sigmas[2]^2, sigmas[3]^2)
varOfVar = var(sigmasSquared)
filename = paste("quad_matrix_varying_variances/", varOfVar, ".csv")
write.csv(successRates, filename, row.names = FALSE)
}
setwd("C:/Users/Matthew/Desktop/REU code")
#generate examples in 2.), varying the variance of variances
for (i in 1:N) {
# 1,2,3 then 2,3,4 then 3,4,5 then...
sigmas = c(sqrt(1), sqrt(2+i*N/4), sqrt(3))
#Note that the matrix is CSH (we could also do ARH1)
Sigma = makeCSH(3, .5, sigmas)
res = results_matrix(100, 3, 10, Sigma, c(0,0,0))
differences = diff(res, 13)
#get success/failure rates
successRates = quad_correct(differences, thumb)
#writing file names and saving to csv tee hee
sigmasSquared = c(sigmas[1]^2, sigmas[2]^2, sigmas[3]^2)
varOfVar = var(sigmasSquared)
filename = paste("quad_matrix_varying_variances/", varOfVar, ".csv")
write.csv(successRates, filename, row.names = FALSE)
}
printwd
printwd()
setwd("C:/Users/Matthew/Desktop/Laf-REU-2022")
#generate examples in 2.), varying the variance of variances
for (i in 1:N) {
# 1,2,3 then 2,3,4 then 3,4,5 then...
sigmas = c(sqrt(1), sqrt(2+i*N/4), sqrt(3))
#Note that the matrix is CSH (we could also do ARH1)
Sigma = makeCSH(3, .5, sigmas)
res = results_matrix(100, 3, 10, Sigma, c(0,0,0))
differences = diff(res, 13)
#get success/failure rates
successRates = quad_correct(differences, thumb)
#writing file names and saving to csv tee hee
sigmasSquared = c(sigmas[1]^2, sigmas[2]^2, sigmas[3]^2)
varOfVar = var(sigmasSquared)
filename = paste("quad_matrix_varying_variances/", varOfVar, ".csv")
write.csv(successRates, filename, row.names = FALSE)
}
#generate examples in 2.), varying the variance of variances
for (i in 1:N) {
# 1,2,10 then 1,2.4,10 then 1,2.8,10 then...
sigmas = c(sqrt(1), sqrt(2+(i-1)*4/10), sqrt(10))
#Note that the matrix is CSH (we could also do ARH1)
Sigma = makeCSH(3, .5, sigmas)
res = results_matrix(100, 3, 10, Sigma, c(0,0,0))
differences = diff(res, 13)
#get success/failure rates
successRates = quad_correct(differences, thumb)
#writing file names and saving to csv tee hee
sigmasSquared = c(sigmas[1]^2, sigmas[2]^2, sigmas[3]^2)
varOfVar = var(sigmasSquared)
filename = paste("quad_matrix_varying_variances/", varOfVar, ".csv")
write.csv(successRates, filename, row.names = FALSE)
}
n_obs = 3
thumb = 3
N = 10
# Run experiment varying the min/max ratio from 1/10 to 1 in increments of 1/10
for (i in 1:N) {
# 1,10,10 then 2,10,10 then 3,10,10 then... 10,10,10
sigmas = c(sqrt(i), sqrt(10), sqrt(10))
#Note that the matrix is CSH (we could also do ARH1)
Sigma = makeCSH(3, .5, sigmas)
res = results_matrix(100, 3, 10, Sigma, c(0,0,0))
differences = diff(res, 13)
#get success/failure rates
successRates = quad_correct(differences, thumb)
#writing file names and saving to csv tee hee
ratio = sigmas[1]^2 / sigmas[3]^2
filename = paste("quad_matrix_varying_ratios/", ratio, ".csv")
write.csv(successRates, filename, row.names = FALSE)
}
