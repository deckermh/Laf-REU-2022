}
BICDistribution_manual <- function(N, n_subs, Sigma, means) {
#matrix with BIC scores for different fits as columns
BIC_scores = matrix(nrow = N, ncol = 6)
names = c("Unstructured", "Simple", "CS", "AR1", "CSH", "ARH1")
#for each row in BIC_scores...
for (i in 1:N) {
n_obs = dim(Sigma)[1]
#generate data
data = generate_data(n_obs, n_subs, Sigma, means)
#generate fits
fits = fit_data(data, n_obs, n_subs)
UN_BIC = fits[3]
SIM_BIC = fits[6]
CS_BIC = fits[9]
AR1_BIC = fits[12]
CSH_BIC = fits[15]
ARH1_BIC = fits[18]
#collect BIC scores for each fit
BICVector = c(UN_BIC, SIM_BIC, CS_BIC, AR1_BIC, CSH_BIC, ARH1_BIC)
#put the BIC scores into AIC_scores matrix
for (j in 1:6) {
BIC_scores[i, j] = BICVector[j]
}
}
#histogram each column
for (i in 1:6) {
hist(BIC_scores[, i], xlab = paste("BIC values for", names[i], sep = " "), main = paste("Distribution of BIC", names[i], "Values", sep = " "))
}
}
AICDistribution <- function(results) {
N = dim(results)[1]
names = c("Unstructured", "Simple", "CS", "AR1", "CSH", "ARH1")
AICMatrix = matrix(nrow = N, ncol = 6)
for (i in 1:N) {
k = 1
for (j in seq(18, from = 1, by = 3)) {
AICMatrix[i, k] = results[i, j]
k = k + 1
}
}
#histogram each column
for (i in 1:6) {
hist(AICMatrix[, i], xlab = paste("AIC values for", names[i], sep = " "), main = paste("Distribution of AIC", names[i], "Values", sep = " "))
}
}
AICcDistribution <- function(results) {
N = dim(results)[1]
names = c("Unstructured", "Simple", "CS", "AR1", "CSH", "ARH1")
AICcMatrix = matrix(nrow = N, ncol = 6)
for (i in 1:N) {
k = 1
for (j in seq(18, from = 3, by = 3)) {
AICcMatrix[i, k] = results[i, j]
k = k + 1
}
}
#histogram each column
for (i in 1:6) {
hist(AICcMatrix[, i], xlab = paste("AICc values for", names[i], sep = " "), main = paste("Distribution of AICc", names[i], "Values", sep = " "))
}
}
BICDistribution <- function(results) {
N = dim(results)[1]
names = c("Unstructured", "Simple", "CS", "AR1", "CSH", "ARH1")
BICMatrix = matrix(nrow = N, ncol = 6)
for (i in 1:N) {
k = 1
for (j in seq(18, from = 2, by = 3)) {
BICMatrix[i, k] = results[i, j]
k = k + 1
}
}
#histogram each column
for (i in 1:6) {
hist(BICMatrix[, i], xlab = paste("BIC values for", names[i], sep = " "), main = paste("Distribution of BIC", names[i], "Values", sep = " "))
}
}
####Makes Box Plots for Experiment Shown in Thesis (RHO)####
#section 6
AICRhoBoxplots <- function() {
AIC_UN_Data = matrix(nrow = 100, ncol = 10)
AIC_SIM_Data = matrix(nrow = 100, ncol = 10)
AIC_CS_Data = matrix(nrow = 100, ncol = 10)
AIC_AR1_Data = matrix(nrow = 100, ncol = 10)
AIC_CSH_Data = matrix(nrow = 100, ncol = 10)
AIC_ARH1_Data = matrix(nrow = 100, ncol = 10)
#we vary rho from 0 to .9
for (i in 0:9) {
#these are the parameters detailed in section 6
Sigma = makeCS(3, i / 10, 1.2)
res = results_matrix(100, 3, 40, Sigma, c(0, 0, 0))
differences = diff(res, 7)
AIC_UN_Data[, i+1] = differences[, 1]
AIC_SIM_Data[, i+1] = differences[, 4]
AIC_CS_Data[, i+1] = differences[, 7]
AIC_AR1_Data[, i+1] = differences[, 10]
AIC_CSH_Data[, i+1] = differences[, 13]
AIC_ARH1_Data[, i+1] = differences[, 16]
}
#create boxplots
boxplot(AIC_UN_Data[,1:10], main = "AIC_UN - AIC_CS")
boxplot(AIC_SIM_Data[,1:10], main = "AIC_SIM - AIC_CS")
boxplot(AIC_CS_Data[,1:10], main = "AIC_CS - AIC_CS")
boxplot(AIC_AR1_Data[,1:10], main = "AIC_AR1 - AIC_CS")
boxplot(AIC_CSH_Data[,1:10], main = "AIC_CSH - AIC_CS")
boxplot(AIC_ARH1_Data[,1:10], main = "AIC_ARH1 - AIC_CS")
}
####Makes Box Plots for Experiment Shown in Thesis (SIGMA)####
#section 6
AICSigmaBoxplots <- function() {
AIC_UN_Data = matrix(nrow = 100, ncol = 10)
AIC_SIM_Data = matrix(nrow = 100, ncol = 10)
AIC_CS_Data = matrix(nrow = 100, ncol = 10)
AIC_AR1_Data = matrix(nrow = 100, ncol = 10)
AIC_CSH_Data = matrix(nrow = 100, ncol = 10)
AIC_ARH1_Data = matrix(nrow = 100, ncol = 10)
#we vary sigma from 1 to 1.9. Rho = .5
for (i in 0:9) {
#these are the parameters detailed in section 6
Sigma = makeCS(3, .5, 1+i/10)
res = results_matrix(100, 3, 40, Sigma, c(0, 0, 0))
differences = diff(res, 7)
AIC_UN_Data[, i+1] = differences[, 1]
AIC_SIM_Data[, i+1] = differences[, 4]
AIC_CS_Data[, i+1] = differences[, 7]
AIC_AR1_Data[, i+1] = differences[, 10]
AIC_CSH_Data[, i+1] = differences[, 13]
AIC_ARH1_Data[, i+1] = differences[, 16]
}
#create boxplots
boxplot(AIC_UN_Data[,1:10], main = "AIC_UN - AIC_CS")
boxplot(AIC_SIM_Data[,1:10], main = "AIC_SIM - AIC_CS")
boxplot(AIC_CS_Data[,1:10], main = "AIC_CS - AIC_CS")
boxplot(AIC_AR1_Data[,1:10], main = "AIC_AR1 - AIC_CS")
boxplot(AIC_CSH_Data[,1:10], main = "AIC_CSH - AIC_CS")
boxplot(AIC_ARH1_Data[,1:10], main = "AIC_ARH1 - AIC_CS")
}
####Overlapping Histograms####
overlap_histograms <- function(data, exp_col_num_AIC){
##generates 5 double histograms for each IC which compare expected type
##distribution to each other distribution
##outputs as a pdf called "dataname_histograms.pdf"
dataset = deparse(substitute(data))
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
pdf(file=paste(dataset, "_", "histograms", ".pdf", sep = ""))
layout(mat = matrix(c(1, 2, 3, 4, 5, 0), nrow = 3, ncol = 2))
###AIC###
AIC_cols = c(1, 4, 7, 10, 13, 16)
for (col in AIC_cols){
if (col != exp_col_num_AIC){
min = min(c(data[,exp_col_num_AIC], data[,col])) - 10
max = max(c(data[,exp_col_num_AIC], data[,col])) + 10
breakpoints = pretty(min:max, n = 25)
names = colnames(data)
hist1 = hist(data[, exp_col_num_AIC], breaks = breakpoints, plot = FALSE)
hist2 = hist(data[, col], breaks = breakpoints, plot = FALSE)
plot(
hist1,
xlab = paste("Blue:", names[exp_col_num_AIC], "Pink:", names[col], sep = " "),
main = paste(dataset, "Visualization of AIC Comparison", sep = ": "),
col = c1
)
plot(hist2, col = c2, add = TRUE)
}
else if (col == exp_col_num_AIC){
}
}
###AICc###
AICc_cols = c(2, 5, 8, 11, 14, 17)
exp_col_num_AICc = exp_col_num_AIC + 1
for (col in AICc_cols){
if (col != exp_col_num_AICc){
min = min(c(data[,exp_col_num_AICc], data[,col])) - 10
max = max(c(data[,exp_col_num_AICc], data[,col])) + 10
breakpoints = pretty(min:max, n = 25)
names = colnames(data)
hist1 = hist(data[, exp_col_num_AICc], breaks = breakpoints, plot = FALSE)
hist2 = hist(data[, col], breaks = breakpoints, plot = FALSE)
plot(
hist1,
xlab = paste("Blue:", names[exp_col_num_AICc], "Pink:", names[col], sep = " "),
main = paste(dataset, "Visualization of AICc Comparison", sep = ": "),
col = c1
)
plot(hist2, col = c2, add = TRUE)
}
else if (col == exp_col_num_AICc){
}
}
###BIC###
BIC_cols = c(3, 6, 9, 12, 15, 18)
exp_col_num_BIC = exp_col_num_AIC + 2
for (col in BIC_cols){
if (col != exp_col_num_BIC){
min = min(c(data[,exp_col_num_BIC], data[,col])) - 10
max = max(c(data[,exp_col_num_BIC], data[,col])) + 10
breakpoints = pretty(min:max, n = 25)
names = colnames(data)
hist1 = hist(data[, exp_col_num_BIC], breaks = breakpoints, plot = FALSE)
hist2 = hist(data[, col], breaks = breakpoints, plot = FALSE)
plot(
hist1,
xlab = paste("Blue:", names[exp_col_num_BIC], "Pink:", names[col], sep = " "),
main = paste(dataset, "Visualization of BIC Comparison", sep = ": "),
col = c1
)
plot(hist2, col = c2, add = TRUE)
}
else if (col == exp_col_num_BIC){
}
}
dev.off()
}
####Plot 3 and 4 as a Function of a Desired Lever####
plot34 <- function(data_list, x_vect, x_vect_var_name, exp_col_num_AIC, thumb){
###data_list is a list(data1, data2, ... dataN) list of all sets of data of interest
###IMPORTANT ~ save ur data_list and name it before use in this function
###b/c this name is used to create the pdf file name
###x_vect_var_name examples ("sigma", "rho", etc.) this becomes the x lab of each plot
###x_vect is a vect of the variable you want to plot the types 3 and 4 by
###for example for varying p would input  x_vect = c(.1, .2, .3, .4, .5, .8)
###which plots lines for 3 and 4 as a function of p
###length of data_list and x_vect should be equal
data_name = deparse(substitute(data_list))
pdf(file=paste(data_name, "_", "type34", ".pdf", sep = ""))
layout(mat = matrix(c(1, 3, 5, 2, 4, 6), nrow = 3, ncol = 2))
len = length(data_list)
#AIC_col = c(1, 4, 7, 10, 13, 16)
###rows of these matrices will go top to bottom p = .1, .2, ... , .5, .8
type3_data = matrix(0, len, 18)
colnames(type3_data) = c(
"AIC_UN",
"AIC_SIM",
"AIC_CS",
"AIC_AR1",
"AIC_CSH",
"AIC_ARH1",
"AICc_UN",
"AICc_SIM",
"AICc_CS",
"AICc_AR1",
"AICc_CSH",
"AICc_ARH1",
"BIC_UN",
"BIC_SIM",
"BIC_CS",
"BIC_AR1",
"BIC_CSH",
"BIC_ARH1"
)
type4_data = matrix(0, len, 18)
colnames(type4_data) = colnames(type3_data)
row_count = 1
for (data in data_list){
diff = diff(data, exp_col_num_AIC)
quad = quad_correct(diff, thumb)
##
#type 3
##
#AIC
type3_data[row_count, 1] = quad[3, 1]
type3_data[row_count, 2] = quad[3, 4]
type3_data[row_count, 3] = quad[3, 7]
type3_data[row_count, 4] = quad[3, 10]
type3_data[row_count, 5] = quad[3, 13]
type3_data[row_count, 6] = quad[3, 16]
#AICc
type3_data[row_count, 7] = quad[3, 2]
type3_data[row_count, 8] = quad[3, 5]
type3_data[row_count, 9] = quad[3, 8]
type3_data[row_count, 10] = quad[3, 11]
type3_data[row_count, 11] = quad[3, 14]
type3_data[row_count, 12] = quad[3, 17]
#BIC
type3_data[row_count, 13] = quad[3, 3]
type3_data[row_count, 14] = quad[3, 6]
type3_data[row_count, 15] = quad[3, 9]
type3_data[row_count, 16] = quad[3, 12]
type3_data[row_count, 17] = quad[3, 15]
type3_data[row_count, 18] = quad[3, 18]
##
#type 4
##
#AIC
type4_data[row_count, 1] = quad[4, 1]
type4_data[row_count, 2] = quad[4, 4]
type4_data[row_count, 3] = quad[4, 7]
type4_data[row_count, 4] = quad[4, 10]
type4_data[row_count, 5] = quad[4, 13]
type4_data[row_count, 6] = quad[4, 16]
#AICc
type4_data[row_count, 7] = quad[4, 2]
type4_data[row_count, 8] = quad[4, 5]
type4_data[row_count, 9] = quad[4, 8]
type4_data[row_count, 10] = quad[4, 11]
type4_data[row_count, 11] = quad[4, 14]
type4_data[row_count, 12] = quad[4, 17]
#BIC
type4_data[row_count, 13] = quad[4, 3]
type4_data[row_count, 14] = quad[4, 6]
type4_data[row_count, 15] = quad[4, 9]
type4_data[row_count, 16] = quad[4, 12]
type4_data[row_count, 17] = quad[4, 15]
type4_data[row_count, 18] = quad[4, 18]
row_count = row_count + 1
}
##
#AIC PLOTS
##
#Type3
matplot(
x_vect,
type3_data[, 1:6],
main = paste("Percentage of AIC Type 3 Results Varying", x_vect_var_name, sep = " "),
xlab = x_vect_var_name,
ylab = "Percentage",
pch = 19,
col = c("violetred1", "orange", "green", "royalblue1", "purple", "pink"),
type = "b"
)
legend(
"topleft",
legend = c("UN", "SIM", "CS", "AR1", "CSH", "ARH1"),
fill = c("violetred1", "orange", "green", "royalblue1", "purple", "pink"),
box.lty=0,
ncol = 3,
cex = .6
)
#Type4
matplot(
x_vect,
type4_data[, 1:6],
main = paste("Percentage of AIC Type 4 Results Varying", x_vect_var_name, sep = " "),
xlab = x_vect_var_name,
ylab = "Percentage",
pch = 19,
col = c("violetred1", "orange", "green", "royalblue1", "purple", "pink"),
type = "b"
)
legend(
"topleft",
legend = c("UN", "SIM", "CS", "AR1", "CSH", "ARH1"),
fill = c("violetred1", "orange", "green", "royalblue1", "purple", "pink"),
box.lty=0,
ncol = 3,
cex = .6
)
##
#AICc PLOTS
##
#Type3
matplot(
x_vect,
type3_data[, 7:12],
main = paste("Percentage of AICc Type 3 Results Varying", x_vect_var_name, sep = " "),
xlab = x_vect_var_name,
ylab = "Percentage",
pch = 19,
col = c("violetred1", "orange", "green", "royalblue1", "purple", "pink"),
type = "b"
)
legend(
"topleft",
legend = c("UN", "SIM", "CS", "AR1", "CSH", "ARH1"),
fill = c("violetred1", "orange", "green", "royalblue1", "purple", "pink"),
box.lty = 0,
ncol = 3,
cex = .6
)
#Type4
matplot(
x_vect,
type4_data[, 7:12],
main = paste("Percentage of AICc Type 4 Results Varying", x_vect_var_name, sep = " "),
xlab = x_vect_var_name,
ylab = "Percentage",
pch = 19,
col = c("violetred1", "orange", "green", "royalblue1", "purple", "pink"),
type = "b"
)
legend(
"topleft",
legend = c("UN", "SIM", "CS", "AR1", "CSH", "ARH1"),
fill = c("violetred1", "orange", "green", "royalblue1", "purple", "pink"),
box.lty=0,
ncol = 3,
cex = .6
)
##
#BIC PLOTS
##
#Type3
matplot(
x_vect,
type3_data[, 13:18],
main = paste("Percentage of BIC Type 3 Results Varying", x_vect_var_name, sep = " "),
xlab = x_vect_var_name,
ylab = "Percentage",
pch = 19,
col = c("violetred1", "orange", "green", "royalblue1", "purple", "pink"),
type = "b"
)
legend(
"topleft",
legend = c("UN", "SIM", "CS", "AR1", "CSH", "ARH1"),
fill = c("violetred1", "orange", "green", "royalblue1", "purple", "pink"),
box.lty=0,
ncol = 3,
cex = .6
)
#Type4
matplot(
x_vect,
type4_data[, 13:18],
main = paste("Percentage of BIC Type 4 Results Varying", x_vect_var_name, sep = " "),
xlab = x_vect_var_name,
ylab = "Percentage",
pch = 19,
col = c("violetred1", "orange", "green", "royalblue1", "purple", "pink"),
type = "b"
)
legend(
"topleft",
legend = c("UN", "SIM", "CS", "AR1", "CSH", "ARH1"),
fill = c("violetred1", "orange", "green", "royalblue1", "purple", "pink"),
box.lty=0,
ncol = 3,
cex = .6
)
dev.off()
}
ICHeteroBoxplots(4, 4, 2)
#make a plot of box plots for distribution of Type 4 success percentage in
#in IC_CS as heteroskedasticity increases
#
#@param N - number of trials
#@param type - the type of error/success to boxplot (type 1, 2, 3, or 4)
#@param IC - the type of IC to plot (0 = AIC, 1 = AICc, 2 = BIC)
#
ICHeteroBoxplots <- function(N, type, IC) {
if (type != 1 && type != 2 && type != 3 && type != 4) {
return(NULL)
}
if (IC != 0 && IC != 1 && IC != 2) {
return(NULL)
}
#This matrix will store a ton of IC failure counts.
#the first row will be N type 4 percentages at .1 heteroskedasticity
#the second row will be at .2 heteroskedasticity, etc.
IC_CS_Data = matrix(nrow = 8, ncol = N)
#we vary min/max ratio from .1 to .8
for (i in 1:8) {
for (j in 1:N) {
#generate CSH matrix with varying levels of heterosked.
sigmas = c(sqrt(i), sqrt(10), sqrt(10))
Sigma = makeCSH(3, .7, sigmas)
#get quad correct for data (NOTE N SHOULD BE 100)
res = results_matrix(10, 3, 40, Sigma, c(0, 0, 0))
d = diff(res, 13)
#rule of thumb is 3
quad = quad_correct(d, 3, returnPercents = F)
#get failure count for IC_CS fit
IC_CS_count = quad[type, 7 + IC]
IC_CS_Data[i,j] = IC_CS_count
}
}
#create boxplots
boxplot(IC_CS_Data[1:8, ], main = paste("Type ", type, "Percentage for Varying Heteroskedasticity"))
}
ICHeteroBoxplots(4, 4, 2)
ICHeteroBoxplots(4, 4, 2)
IC_CS_Data
#make a plot of box plots for distribution of Type 4 success percentage in
#in IC_CS as heteroskedasticity increases
#
#@param N - number of trials
#@param type - the type of error/success to boxplot (type 1, 2, 3, or 4)
#@param IC - the type of IC to plot (0 = AIC, 1 = AICc, 2 = BIC)
#
ICHeteroBoxplots <- function(N, type, IC) {
if (type != 1 && type != 2 && type != 3 && type != 4) {
return(NULL)
}
if (IC != 0 && IC != 1 && IC != 2) {
return(NULL)
}
#This matrix will store a ton of IC failure counts.
#the first row will be N type 4 percentages at .1 heteroskedasticity
#the second row will be at .2 heteroskedasticity, etc.
IC_CS_Data = matrix(nrow = 8, ncol = N)
#we vary min/max ratio from .1 to .8
for (i in 1:8) {
for (j in 1:N) {
#generate CSH matrix with varying levels of heterosked.
sigmas = c(sqrt(i), sqrt(10), sqrt(10))
Sigma = makeCSH(3, .7, sigmas)
#get quad correct for data (NOTE N SHOULD BE 100)
res = results_matrix(10, 3, 40, Sigma, c(0, 0, 0))
d = diff(res, 13)
#rule of thumb is 3
quad = quad_correct(d, 3, returnPercents = F)
#get failure count for IC_CS fit
IC_CS_count = quad[type, 7 + IC]
IC_CS_Data[i,j] = IC_CS_count
}
}
#create boxplots
boxplot(IC_CS_Data[1:8, ], main = paste("Type ", type, "Percentage for Varying Heteroskedasticity"))
}
ICHeteroBoxplots(4, 4, 2)
