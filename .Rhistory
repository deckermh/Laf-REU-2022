}
else {
##difference of 0
print(0)
}
}
}
#Failure and successes for AICc
for (j in seq(18, from = 2, by = 3)) {
if (j == exp_col_num_AICc) {
}
else{
if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] < thumb) {
##Right model, not significant
print(1)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] > -(thumb)) {
##Wrong model, not significant
print(2)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] < -(thumb)) {
##Wrong model, Significant
print(3)
}
else if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] > thumb) {
##Right model, signifigant
print(4)
}
}
}
#Failure and successes for BIC
for (j in seq(18, from = 3, by = 3)) {
if (j == exp_col_num_BIC) {
}
if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] < thumb) {
##Right model, not significant
print(1)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] > -(thumb)) {
##Wrong model, not significant
print(2)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] < -(thumb)) {
##Wrong model, Significant
print(3)
}
else if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] > thumb) {
##Right model, significant
print(4)
}
}
}
#set col names
#colnames(model_sig) = colnames()
return (model_sig)
}
cor = correct(7, diff_matrix, 3)
model_sig
###Function to know if the IC chose correctly
#thumb = variable to use for "rule of thumb"
# 1 =
# 2 =
# 3 =
# 4 =
# 0 =
correct <- function(exp_col_num_AIC, diff_matrix, thumb) {
N = dim(diff_matrix)[1]
#model_sig = matrix(nrow = N, ncol = 15, byrow = T)
exp_col_num_AICc = exp_col_num_AIC + 1
exp_col_num_BIC = exp_col_num_AIC + 2
for (i in 1:N) {
##Failures and successes for AIC
for (j in seq(18, from = 1, by = 3)) {
if (j == exp_col_num_AIC) {
}
else{
if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] < thumb) {
##Right model, not significant
print(1)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] > -(thumb)) {
##Wrong model, not significant
print(2)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] < -(thumb)) {
##Wrong model, Significant
print(3)
}
else if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] > thumb) {
##Right model, significant
print(4)
}
else {
##difference of 0
print(0)
}
}
}
#Failure and successes for AICc
for (j in seq(18, from = 2, by = 3)) {
if (j == exp_col_num_AICc) {
}
else{
if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] < thumb) {
##Right model, not significant
print(1)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] > -(thumb)) {
##Wrong model, not significant
print(2)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] < -(thumb)) {
##Wrong model, Significant
print(3)
}
else if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] > thumb) {
##Right model, signifigant
print(4)
}
}
}
#Failure and successes for BIC
for (j in seq(18, from = 3, by = 3)) {
if (j == exp_col_num_BIC) {
}
if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] < thumb) {
##Right model, not significant
print(1)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] > -(thumb)) {
##Wrong model, not significant
print(2)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] < -(thumb)) {
##Wrong model, Significant
print(3)
}
else if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] > thumb) {
##Right model, significant
print(4)
}
}
}
#create matrix
model_sig = matrix(correct, nrow = N, ncol = (5*3*N) , byrow = T, dimnames = c("UNfit_AIC",
"UNfit_AICc",
"UNfit_BIC",
"SIMfit_AIC",
"SIMfit_AICc",
"SIMfit_BIC",
"AR1fit_AIC",
"AR1fit_AICc",
"AR1fit_BIC",
"CSHfit_AIC",
"CSHfit_AICc",
"CSHfit_BIC",
"ARH1fit_AIC",
"ARH1fit_AICc",
"ARH1fit_BIC"))
return (model_sig)
}
cor = correct(7, diff_matrix, 3)
model_sig
###Function to know if the IC chose correctly
#thumb = variable to use for "rule of thumb"
# 1 =
# 2 =
# 3 =
# 4 =
# 0 =
correct <- function(exp_col_num_AIC, diff_matrix, thumb) {
N = dim(diff_matrix)[1]
model_sig = matrix(correct, nrow = N, ncol = (5*3*N) , byrow = T, dimnames = c("UNfit_AIC",
"UNfit_AICc",
"UNfit_BIC",
"SIMfit_AIC",
"SIMfit_AICc",
"SIMfit_BIC",
"AR1fit_AIC",
"AR1fit_AICc",
"AR1fit_BIC",
"CSHfit_AIC",
"CSHfit_AICc",
"CSHfit_BIC",
"ARH1fit_AIC",
"ARH1fit_AICc",
"ARH1fit_BIC")
exp_col_num_AICc = exp_col_num_AIC + 1
exp_col_num_BIC = exp_col_num_AIC + 2
for (i in 1:N) {
##Failures and successes for AIC
for (j in seq(18, from = 1, by = 3)) {
if (j == exp_col_num_AIC) {
}
else{
if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] < thumb) {
##Right model, not significant
print(1)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] > -(thumb)) {
##Wrong model, not significant
print(2)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] < -(thumb)) {
##Wrong model, Significant
print(3)
}
else if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] > thumb) {
##Right model, significant
print(4)
}
else {
##difference of 0
print(0)
}
}
}
#Failure and successes for AICc
for (j in seq(18, from = 2, by = 3)) {
if (j == exp_col_num_AICc) {
}
else{
if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] < thumb) {
##Right model, not significant
print(1)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] > -(thumb)) {
##Wrong model, not significant
print(2)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] < -(thumb)) {
##Wrong model, Significant
print(3)
}
else if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] > thumb) {
##Right model, signifigant
print(4)
}
}
}
#Failure and successes for BIC
for (j in seq(18, from = 3, by = 3)) {
if (j == exp_col_num_BIC) {
}
if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] < thumb) {
##Right model, not significant
print(1)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] > -(thumb)) {
##Wrong model, not significant
print(2)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] < -(thumb)) {
##Wrong model, Significant
print(3)
}
else if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] > thumb) {
##Right model, significant
print(4)
}
}
}
#create matrix
#model_sig = matrix(correct, nrow = N, ncol = (5*3*N) , byrow = T, dimnames = c("UNfit_AIC",
"UNfit_AICc",
"UNfit_BIC",
"SIMfit_AIC",
"SIMfit_AICc",
"SIMfit_BIC",
"AR1fit_AIC",
"AR1fit_AICc",
"AR1fit_BIC",
"CSHfit_AIC",
"CSHfit_AICc",
"CSHfit_BIC",
"ARH1fit_AIC",
"ARH1fit_AICc",
"ARH1fit_BIC")
return (model_sig)
}
diff_matrix
cor = correct(7, diff_matrix, 3)
###Function to know if the IC chose correctly
#thumb = variable to use for "rule of thumb"
# 1 =
# 2 =
# 3 =
# 4 =
# 0 =
correct <- function(exp_col_num_AIC, diff_matrix, thumb) {
N = dim(diff_matrix)[1]
exp_col_num_AICc = exp_col_num_AIC + 1
exp_col_num_BIC = exp_col_num_AIC + 2
for (i in 1:N) {
##Failures and successes for AIC
AIC_
for (j in seq(18, from = 1, by = 3)) {
if (j == exp_col_num_AIC) {
}
else{
if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] < thumb) {
##Right model, not significant
print(1)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] > -(thumb)) {
##Wrong model, not significant
print(2)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] < -(thumb)) {
##Wrong model, Significant
print(3)
}
else if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] > thumb) {
##Right model, significant
print(4)
}
else {
##difference of 0
print(0)
}
}
}
#Failure and successes for AICc
for (j in seq(18, from = 2, by = 3)) {
if (j == exp_col_num_AICc) {
}
else{
if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] < thumb) {
##Right model, not significant
print(1)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] > -(thumb)) {
##Wrong model, not significant
print(2)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] < -(thumb)) {
##Wrong model, Significant
print(3)
}
else if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] > thumb) {
##Right model, significant
print(4)
}
}
}
#Failure and successes for BIC
for (j in seq(18, from = 3, by = 3)) {
if (j == exp_col_num_BIC) {
}
if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] < thumb) {
##Right model, not significant
print(1)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] > -(thumb)) {
##Wrong model, not significant
print(2)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] < -(thumb)) {
##Wrong model, Significant
print(3)
}
else if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] > thumb) {
##Right model, significant
print(4)
}
}
}
}
cor = correct(7, diff_matrix, 3)
###Function to know if the IC chose correctly
#thumb = variable to use for "rule of thumb"
# 1 =
# 2 =
# 3 =
# 4 =
# 0 =
correct <- function(exp_col_num_AIC, diff_matrix, thumb) {
N = dim(diff_matrix)[1]
exp_col_num_AICc = exp_col_num_AIC + 1
exp_col_num_BIC = exp_col_num_AIC + 2
for (i in 1:N) {
##Failures and successes for AIC
# AIC_
for (j in seq(18, from = 1, by = 3)) {
if (j == exp_col_num_AIC) {
}
else{
if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] < thumb) {
##Right model, not significant
print(1)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] > -(thumb)) {
##Wrong model, not significant
print(2)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] < -(thumb)) {
##Wrong model, Significant
print(3)
}
else if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] > thumb) {
##Right model, significant
print(4)
}
else {
##difference of 0
print(0)
}
}
}
#Failure and successes for AICc
for (j in seq(18, from = 2, by = 3)) {
if (j == exp_col_num_AICc) {
}
else{
if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] < thumb) {
##Right model, not significant
print(1)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] > -(thumb)) {
##Wrong model, not significant
print(2)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] < -(thumb)) {
##Wrong model, Significant
print(3)
}
else if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] > thumb) {
##Right model, significant
print(4)
}
}
}
#Failure and successes for BIC
for (j in seq(18, from = 3, by = 3)) {
if (j == exp_col_num_BIC) {
}
if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] < thumb) {
##Right model, not significant
print(1)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] > -(thumb)) {
##Wrong model, not significant
print(2)
}
else if (diff_matrix[i, j] < 0 &&
diff_matrix[i, j] < -(thumb)) {
##Wrong model, Significant
print(3)
}
else if (diff_matrix[i, j] > 0 &&
diff_matrix[i, j] > thumb) {
##Right model, significant
print(4)
}
}
}
}
cor = correct(7, diff_matrix, 3)
