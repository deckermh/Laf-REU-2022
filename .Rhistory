"AIC_UN",
"AIC_SIM",
"AIC_CS",
"AIC_AR1",
"AIC_CSH",
"AIC_ARH1",
"AICc_UN",
"AICc_SIM",
"AICc_CS",
"AICc_AR1",
"AICc_CSH",
"AICc_ARH1",
"BIC_UN",
"BIC_SIM",
"BIC_CS",
"BIC_AR1",
"BIC_CSH",
"BIC_ARH1"
)
type4_data = matrix(0, len, 18)
colnames(type4_data) = colnames(type3_data)
row_count = 1
for (data in data_list){
diff = diff(data, exp_col_num_AIC)
quad = quad_correct(diff, thumb)
##
#type 3
##
#AIC
type3_data[row_count, 1] = quad[3, 1]
type3_data[row_count, 2] = quad[3, 4]
type3_data[row_count, 3] = quad[3, 7]
type3_data[row_count, 4] = quad[3, 10]
type3_data[row_count, 5] = quad[3, 13]
type3_data[row_count, 6] = quad[3, 16]
#AICc
type3_data[row_count, 7] = quad[3, 2]
type3_data[row_count, 8] = quad[3, 5]
type3_data[row_count, 9] = quad[3, 8]
type3_data[row_count, 10] = quad[3, 11]
type3_data[row_count, 11] = quad[3, 14]
type3_data[row_count, 12] = quad[3, 17]
#BIC
type3_data[row_count, 13] = quad[3, 3]
type3_data[row_count, 14] = quad[3, 6]
type3_data[row_count, 15] = quad[3, 9]
type3_data[row_count, 16] = quad[3, 12]
type3_data[row_count, 17] = quad[3, 15]
type3_data[row_count, 18] = quad[3, 18]
##
#type 4
##
#AIC
type4_data[row_count, 1] = quad[4, 1]
type4_data[row_count, 2] = quad[4, 4]
type4_data[row_count, 3] = quad[4, 7]
type4_data[row_count, 4] = quad[4, 10]
type4_data[row_count, 5] = quad[4, 13]
type4_data[row_count, 6] = quad[4, 16]
#AICc
type4_data[row_count, 7] = quad[4, 2]
type4_data[row_count, 8] = quad[4, 5]
type4_data[row_count, 9] = quad[4, 8]
type4_data[row_count, 10] = quad[4, 11]
type4_data[row_count, 11] = quad[4, 14]
type4_data[row_count, 12] = quad[4, 17]
#BIC
type4_data[row_count, 13] = quad[4, 3]
type4_data[row_count, 14] = quad[4, 6]
type4_data[row_count, 15] = quad[4, 9]
type4_data[row_count, 16] = quad[4, 12]
type4_data[row_count, 17] = quad[4, 15]
type4_data[row_count, 18] = quad[4, 18]
row_count = row_count + 1
}
##
#AIC PLOTS
##
#Type3
matplot(
x_vect,
type3_data[, 1:6],
main = paste("Percentage of AIC Type 3 Results Varying", x_vect_var_name, sep = " "),
xlab = x_vect_var_name,
ylab = "Percentage",
pch = 19,
col = c("violetred1", "orange", "green", "royalblue1", "purple", "pink"),
type = "b"
)
legend(
"topleft",
legend = c("UN", "SIM", "CS", "AR1", "CSH", "ARH1"),
fill = c("violetred1", "orange", "green", "royalblue1", "purple", "pink"),
box.lty=0,
ncol = 3,
cex = .6
)
#Type4
matplot(
x_vect,
type4_data[, 1:6],
main = paste("Percentage of AIC Type 4 Results Varying", x_vect_var_name, sep = " "),
xlab = x_vect_var_name,
ylab = "Percentage",
pch = 19,
col = c("violetred1", "orange", "green", "royalblue1", "purple", "pink"),
type = "b"
)
legend(
"topleft",
legend = c("UN", "SIM", "CS", "AR1", "CSH", "ARH1"),
fill = c("violetred1", "orange", "green", "royalblue1", "purple", "pink"),
box.lty=0,
ncol = 3,
cex = .6
)
##
#AICc PLOTS
##
#Type3
matplot(
x_vect,
type3_data[, 7:12],
main = paste("Percentage of AICc Type 3 Results Varying", x_vect_var_name, sep = " "),
xlab = x_vect_var_name,
ylab = "Percentage",
pch = 19,
col = c("violetred1", "orange", "green", "royalblue1", "purple", "pink"),
type = "b"
)
legend(
"topleft",
legend = c("UN", "SIM", "CS", "AR1", "CSH", "ARH1"),
fill = c("violetred1", "orange", "green", "royalblue1", "purple", "pink"),
box.lty = 0,
ncol = 3,
cex = .6
)
#Type4
matplot(
x_vect,
type4_data[, 7:12],
main = paste("Percentage of AICc Type 4 Results Varying", x_vect_var_name, sep = " "),
xlab = x_vect_var_name,
ylab = "Percentage",
pch = 19,
col = c("violetred1", "orange", "green", "royalblue1", "purple", "pink"),
type = "b"
)
legend(
"topleft",
legend = c("UN", "SIM", "CS", "AR1", "CSH", "ARH1"),
fill = c("violetred1", "orange", "green", "royalblue1", "purple", "pink"),
box.lty=0,
ncol = 3,
cex = .6
)
##
#BIC PLOTS
##
#Type3
matplot(
x_vect,
type3_data[, 13:18],
main = paste("Percentage of BIC Type 3 Results Varying", x_vect_var_name, sep = " "),
xlab = x_vect_var_name,
ylab = "Percentage",
pch = 19,
col = c("violetred1", "orange", "green", "royalblue1", "purple", "pink"),
type = "b"
)
legend(
"topleft",
legend = c("UN", "SIM", "CS", "AR1", "CSH", "ARH1"),
fill = c("violetred1", "orange", "green", "royalblue1", "purple", "pink"),
box.lty=0,
ncol = 3,
cex = .6
)
#Type4
matplot(
x_vect,
type4_data[, 13:18],
main = paste("Percentage of BIC Type 4 Results Varying", x_vect_var_name, sep = " "),
xlab = x_vect_var_name,
ylab = "Percentage",
pch = 19,
col = c("violetred1", "orange", "green", "royalblue1", "purple", "pink"),
type = "b"
)
legend(
"topleft",
legend = c("UN", "SIM", "CS", "AR1", "CSH", "ARH1"),
fill = c("violetred1", "orange", "green", "royalblue1", "purple", "pink"),
box.lty=0,
ncol = 3,
cex = .6
)
dev.off()
}
ICHeteroBoxplots(5, 4, 0)
IC_CS_Data
IC_CS_count
quad
IC_CS_Data
ICHeteroBoxplots(5, 4, 0)
boxplot(IC_CS_Data[, 1:N], main = paste("Type ", type, "Percentage for Varying Heteroskedasticity"))
IC_CS_Data = matrix(nrow = 8, ncol = N)
#make a plot of box plots for distribution of Type 4 success percentage in
#in IC_CS as heteroskedasticity increases
#
#@param N - number of trials
#@param type - the type of error/success to boxplot (type 1, 2, 3, or 4)
#@param IC - the type of IC to plot (0 = AIC, 1 = AICc, 2 = BIC)
#
ICHeteroBoxplots <- function(N, type, IC) {
if (type != 1 && type != 2 && type != 3 && type != 4) {
return(NULL)
}
if (IC != 0 && IC != 1 && IC != 2) {
return(NULL)
}
#This matrix will store a ton of IC failure counts.
#the first row will be N type 4 percentages at .1 heteroskedasticity
#the second row will be at .2 heteroskedasticity, etc.
IC_CS_Data = matrix(nrow = 8, ncol = N)
#we vary min/max ratio from .1 to .8
for (i in 1:8) {
for (j in 1:N) {
#generate CSH matrix with varying levels of heterosked.
sigmas = c(sqrt(i), sqrt(10), sqrt(10))
Sigma = makeCSH(3, .7, sigmas)
#get quad correct for data (NOTE N SHOULD BE 100)
res = results_matrix(10, 3, 40, Sigma, c(0, 0, 0))
d = diff(res, 13)
#rule of thumb is 3
quad = quad_correct(d, 3, returnPercents = F)
#get failure count for IC_CS fit
IC_CS_count = quad[type, 7 + IC]
IC_CS_Data[i,j] = IC_CS_count
}
}
#create boxplots
boxplot(IC_CS_Data[, 1:N], main = paste("Type ", type, "Percentage for Varying Heteroskedasticity"))
}
IC_CS_Data = matrix(nrow = 8, ncol = N)
#make a plot of box plots for distribution of Type 4 success percentage in
#in IC_CS as heteroskedasticity increases
#
#@param N - number of trials
#@param type - the type of error/success to boxplot (type 1, 2, 3, or 4)
#@param IC - the type of IC to plot (0 = AIC, 1 = AICc, 2 = BIC)
#
ICHeteroBoxplots <- function(N, type, IC) {
if (type != 1 && type != 2 && type != 3 && type != 4) {
return(NULL)
}
if (IC != 0 && IC != 1 && IC != 2) {
return(NULL)
}
#This matrix will store a ton of IC failure counts.
#the first row will be N type 4 percentages at .1 heteroskedasticity
#the second row will be at .2 heteroskedasticity, etc.
IC_CS_Data = matrix(nrow = 8, ncol = N)
#we vary min/max ratio from .1 to .8
for (i in 1:8) {
for (j in 1:N) {
#generate CSH matrix with varying levels of heterosked.
sigmas = c(sqrt(i), sqrt(10), sqrt(10))
Sigma = makeCSH(3, .7, sigmas)
#get quad correct for data (NOTE N SHOULD BE 100)
res = results_matrix(10, 3, 40, Sigma, c(0, 0, 0))
d = diff(res, 13)
#rule of thumb is 3
quad = quad_correct(d, 3, returnPercents = F)
#get failure count for IC_CS fit
IC_CS_count = quad[type, 7 + IC]
IC_CS_Data[i,j] = IC_CS_count
}
}
#create boxplots
boxplot(IC_CS_Data[, 1:N], main = paste("Type ", type, "Percentage for Varying Heteroskedasticity"))
}
#make a plot of box plots for distribution of Type 4 success percentage in
#in IC_CS as heteroskedasticity increases
#
#@param N - number of trials
#@param type - the type of error/success to boxplot (type 1, 2, 3, or 4)
#@param IC - the type of IC to plot (0 = AIC, 1 = AICc, 2 = BIC)
#
ICHeteroBoxplots <- function(N, type, IC) {
if (type != 1 && type != 2 && type != 3 && type != 4) {
return(NULL)
}
if (IC != 0 && IC != 1 && IC != 2) {
return(NULL)
}
#This matrix will store a ton of IC failure counts.
#the first row will be N type 4 percentages at .1 heteroskedasticity
#the second row will be at .2 heteroskedasticity, etc.
IC_CS_Data = matrix(nrow = 8, ncol = N)
#we vary min/max ratio from .1 to .8
for (i in 1:8) {
for (j in 1:N) {
#generate CSH matrix with varying levels of heterosked.
sigmas = c(sqrt(i), sqrt(10), sqrt(10))
Sigma = makeCSH(3, .7, sigmas)
#get quad correct for data (NOTE N SHOULD BE 100)
res = results_matrix(10, 3, 40, Sigma, c(0, 0, 0))
d = diff(res, 13)
#rule of thumb is 3
quad = quad_correct(d, 3, returnPercents = F)
#get failure count for IC_CS fit
IC_CS_count = quad[type, 7 + IC]
IC_CS_Data[i,j] = IC_CS_count
}
}
#create boxplots
boxplot(IC_CS_Data[, 1:N], main = paste("Type ", type, "Percentage for Varying Heteroskedasticity"))
}
debugSource('C:/Users/Matthew/Desktop/Laf-REU-2022/Varying Heteroskedasticity Boxplots.R')
ICHeteroBoxplots(5, 4, 0)
data = IC_CS_Data
data
boxplot(IC_CS_Data[, 1:N], main = paste("Type ", type, "Percentage for Varying Heteroskedasticity"))
boxplot(data[, 1:N], main = paste("Type ", type, "Percentage for Varying Heteroskedasticity"))
boxplot(data[, 1:5], main = paste("Type ", type, "Percentage for Varying Heteroskedasticity"))
boxplot(data[, 1:5], main = paste("Type ", 4, "Percentage for Varying Heteroskedasticity"))
data
ls
data = 1
data
#create boxplots
boxplot(IC_CS_Data[1:8, ], main = paste("Type ", type, "Percentage for Varying Heteroskedasticity"))
boxplot(IC_CS_Data[1:8, ], main = paste("Type ", type, "Percentage for Varying Heteroskedasticity"))
ICHeteroBoxplots(3, 4, 0)
boxplot(IC_CS_Data[,1:N])
boxplot(IC_CS_Data[,1:8])
boxplot(IC_CS_Data[1:8,])
boxplot(IC_CS_Data[1:N,])
boxplot(IC_CS_Data[1:8,])
boxplot(IC_CS_Data[,1:N])
boxplot(IC_CS_Data[1:8,1:N])
boxplot(IC_CS_Data[1:8,])
boxplot(1:10)
x = 1:10
boxplot(x)
boxplot(IC_CS_Data[1,], IC_CS_Data[2,], IC_CS_Data[3,], IC_CS_Data[4,])
boxplot(IC_CS_Data[1,], IC_CS_Data[2,], IC_CS_Data[3,], IC_CS_Data[4,], IC_CS_Data[5,], IC_CS_Data[6,], IC_CS_Data[7,], IC_CS_Data[8,])
#make a plot of box plots for distribution of Type 4 success percentage in
#in IC_CS as heteroskedasticity increases
#
#@param N - number of trials
#@param type - the type of error/success to boxplot (type 1, 2, 3, or 4)
#@param IC - the type of IC to plot (0 = AIC, 1 = AICc, 2 = BIC)
#
ICHeteroBoxplots <- function(N, type, IC) {
if (type != 1 && type != 2 && type != 3 && type != 4) {
return(NULL)
}
if (IC != 0 && IC != 1 && IC != 2) {
return(NULL)
}
#This matrix will store a ton of IC failure counts.
#the first row will be N type 4 percentages at .1 heteroskedasticity
#the second row will be at .2 heteroskedasticity, etc.
IC_CS_Data = matrix(nrow = 8, ncol = N)
#we vary min/max ratio from .1 to .8
for (i in 1:8) {
for (j in 1:N) {
#generate CSH matrix with varying levels of heterosked.
sigmas = c(sqrt(i), sqrt(10), sqrt(10))
Sigma = makeCSH(3, .7, sigmas)
#get quad correct for data (NOTE N SHOULD BE 100)
res = results_matrix(10, 3, 40, Sigma, c(0, 0, 0))
d = diff(res, 13)
#rule of thumb is 3
quad = quad_correct(d, 3, returnPercents = F)
#get failure count for IC_CS fit
IC_CS_count = quad[type, 7 + IC]
IC_CS_Data[i, j] = IC_CS_count
}
}
#create boxplots
boxplot(
IC_CS_Data[1, ],
IC_CS_Data[2, ],
IC_CS_Data[3, ],
IC_CS_Data[4, ],
IC_CS_Data[5, ],
IC_CS_Data[6, ],
IC_CS_Data[7, ],
IC_CS_Data[8, ],
main = paste("Type ", type, "Percentage for Varying Heteroskedasticity")
)
}
ICHeteroBoxplots(10, 4, 0)
pwd
pwd()
printwd()
setwd("C:/Users/Matthew/Desktop/Laf-REU-2022")
ls
ls()
matrix = read.matrix("IC_CS_Data", header = FALSE, sep = " ")
matrix = read.matrix("IC_CS_Data", header = FALSE, sep = " ")
library(tseries)
install.packages('tseries')
matrix = read.matrix("IC_CS_Data", header = FALSE, sep = " ")
matrix = as.matrix(read.table("IC_CS_Data", header = FALSE, sep = " "))
matrix = as.matrix(read.table("IC_CS_Data.csv", header = FALSE, sep = " "))
matrix = as.matrix(read.table("IC_CS_Data.csv", header = FALSE, sep = ""))
matrix
IC_CS_Data = matrix
boxplot(
IC_CS_Data[1, ],
IC_CS_Data[2, ],
IC_CS_Data[3, ],
IC_CS_Data[4, ],
IC_CS_Data[5, ],
IC_CS_Data[6, ],
IC_CS_Data[7, ],
IC_CS_Data[8, ],
main = paste("Type ", type, "Percentage for Varying Heteroskedasticity")
)
boxplot(
IC_CS_Data[1, ],
IC_CS_Data[2, ],
IC_CS_Data[3, ],
IC_CS_Data[4, ],
IC_CS_Data[5, ],
IC_CS_Data[6, ],
IC_CS_Data[7, ],
IC_CS_Data[8, ],
main = paste("Type 4 Counts of 100 for Varying Heteroskedasticity")
)
boxplot(
IC_CS_Data[1, ],
IC_CS_Data[2, ],
IC_CS_Data[3, ],
IC_CS_Data[4, ],
IC_CS_Data[5, ],
IC_CS_Data[6, ],
IC_CS_Data[7, ],
IC_CS_Data[8, ],
main = paste("Type 4 Counts of 100 for Varying Heteroskedasticity"),
)
boxplot(
IC_CS_Data[1, ],
IC_CS_Data[2, ],
IC_CS_Data[3, ],
IC_CS_Data[4, ],
IC_CS_Data[5, ],
IC_CS_Data[6, ],
IC_CS_Data[7, ],
IC_CS_Data[8, ],
main = paste("Type 4 Counts of 100 for Varying Heteroskedasticity"),
names = c(.1, .2, .3, .4, .5, .6, .7, .8, .9, 1)
)
boxplot(
IC_CS_Data[1, ],
IC_CS_Data[2, ],
IC_CS_Data[3, ],
IC_CS_Data[4, ],
IC_CS_Data[5, ],
IC_CS_Data[6, ],
IC_CS_Data[7, ],
IC_CS_Data[8, ],
main = paste("Type 4 Counts of 100 for Varying Heteroskedasticity"),
names = c(.1, .2, .3, .4, .5, .6, .7, .8)
)
boxplot(
IC_CS_Data[1, ],
IC_CS_Data[2, ],
IC_CS_Data[3, ],
IC_CS_Data[4, ],
IC_CS_Data[5, ],
IC_CS_Data[6, ],
IC_CS_Data[7, ],
IC_CS_Data[8, ],
main = paste("Type 4 Counts Vs. Heteroskedasticity"),
names = c(.1, .2, .3, .4, .5, .6, .7, .8),
xlab = "Min/Max Ratio",
ylab = "Type 4 Count (Out of 100)"
)
boxplot(
IC_CS_Data[1, ],
IC_CS_Data[2, ],
IC_CS_Data[3, ],
IC_CS_Data[4, ],
IC_CS_Data[5, ],
IC_CS_Data[6, ],
IC_CS_Data[7, ],
IC_CS_Data[8, ],
main = paste("Type 4 Counts Vs. Heteroskedasticity"),
names = c(.1, .2, .3, .4, .5, .6, .7, .8),
xlab = "Min/Max Ratio",
ylab = "Type 4 Count (Out of 100)"
)
boxplot(
IC_CS_Data[1, ],
IC_CS_Data[2, ],
IC_CS_Data[3, ],
IC_CS_Data[4, ],
IC_CS_Data[5, ],
IC_CS_Data[6, ],
IC_CS_Data[7, ],
IC_CS_Data[8, ],
main = paste("AIC Type 4 Counts Vs. Heteroskedasticity"),
names = c(.1, .2, .3, .4, .5, .6, .7, .8),
xlab = "Min/Max Ratio",
ylab = "Type 4 Count (Out of 100)"
)
